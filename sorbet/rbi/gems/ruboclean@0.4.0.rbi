# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruboclean` gem.
# Please instead update this file by running `bin/tapioca gem ruboclean`.

# Ruboclean entry point
#
# source://ruboclean//lib/ruboclean/version.rb#3
module Ruboclean
  class << self
    # source://ruboclean//lib/ruboclean.rb#14
    def run_from_cli!(command_line_arguments); end
  end
end

# Reads command line arguments and exposes corresponding reader methods
#
# source://ruboclean//lib/ruboclean/arguments.rb#5
class Ruboclean::Arguments
  # @return [Arguments] a new instance of Arguments
  #
  # source://ruboclean//lib/ruboclean/arguments.rb#6
  def initialize(command_line_arguments = T.unsafe(nil)); end

  # source://ruboclean//lib/ruboclean/arguments.rb#10
  def path; end

  # @return [Boolean]
  #
  # source://ruboclean//lib/ruboclean/arguments.rb#22
  def preserve_comments?; end

  # @return [Boolean]
  #
  # source://ruboclean//lib/ruboclean/arguments.rb#18
  def silent?; end

  # @return [Boolean]
  #
  # source://ruboclean//lib/ruboclean/arguments.rb#14
  def verbose?; end

  private

  # Returns the value of attribute command_line_arguments.
  #
  # source://ruboclean//lib/ruboclean/arguments.rb#28
  def command_line_arguments; end

  # source://ruboclean//lib/ruboclean/arguments.rb#38
  def find_argument(name); end

  # source://ruboclean//lib/ruboclean/arguments.rb#30
  def find_path; end
end

# source://ruboclean//lib/ruboclean.rb#12
class Ruboclean::Error < ::StandardError; end

# Groups the rubocop configuration items into three categories:
#   - base: base configuration like 'require', 'inherit_from', etc
#   - namespaces: every item which does **not** include an "/"
#   - cops: every item which **includes** an "/"
#
# source://ruboclean//lib/ruboclean/grouper.rb#8
class Ruboclean::Grouper
  # @return [Grouper] a new instance of Grouper
  #
  # source://ruboclean//lib/ruboclean/grouper.rb#9
  def initialize(config_hash); end

  # source://ruboclean//lib/ruboclean/grouper.rb#13
  def group_config; end

  private

  # source://ruboclean//lib/ruboclean/grouper.rb#23
  def empty_groups; end

  # source://ruboclean//lib/ruboclean/grouper.rb#27
  def find_target_group(key); end
end

# Orders the items within the groups alphabetically
#
# source://ruboclean//lib/ruboclean/orderer.rb#7
class Ruboclean::Orderer
  # @return [Orderer] a new instance of Orderer
  #
  # source://ruboclean//lib/ruboclean/orderer.rb#8
  def initialize(config_hash); end

  # source://ruboclean//lib/ruboclean/orderer.rb#12
  def order; end

  private

  # source://ruboclean//lib/ruboclean/orderer.rb#25
  def grouped_config; end

  # source://ruboclean//lib/ruboclean/orderer.rb#21
  def order_by_key(config_hash); end
end

# Contains the config_hash representation of the `.rubocop.yml` file
#
# source://ruboclean//lib/ruboclean/rubocop_configuration.rb#5
class Ruboclean::RubocopConfiguration
  # @return [RubocopConfiguration] a new instance of RubocopConfiguration
  #
  # source://ruboclean//lib/ruboclean/rubocop_configuration.rb#6
  def initialize(config_hash); end

  # @return [Boolean]
  #
  # source://ruboclean//lib/ruboclean/rubocop_configuration.rb#14
  def nil?; end

  # source://ruboclean//lib/ruboclean/rubocop_configuration.rb#10
  def order; end
end

# Interface for reading and writing the `.rubocop.yml` file
#
# source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#8
class Ruboclean::RubocopConfigurationPath
  # @raise [InvalidPathError]
  # @return [RubocopConfigurationPath] a new instance of RubocopConfigurationPath
  #
  # source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#18
  def initialize(path); end

  # source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#30
  def load; end

  # source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#34
  def write(rubocop_configuration, preserve_comments: T.unsafe(nil)); end

  private

  # source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#46
  def load_yaml; end

  # source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#54
  def preserve_preceding_comments(source, target); end

  # source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#42
  def sanitize_yaml(data); end

  # source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#50
  def source_yaml; end
end

# Thrown if given path is invalid
#
# source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#12
class Ruboclean::RubocopConfigurationPath::InvalidPathError < ::StandardError
  # @return [InvalidPathError] a new instance of InvalidPathError
  #
  # source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#13
  def initialize(path); end
end

# source://ruboclean//lib/ruboclean/rubocop_configuration_path.rb#9
Ruboclean::RubocopConfigurationPath::PERMITTED_CLASSED = T.let(T.unsafe(nil), Array)

# Proxy for invoking the cleaning
#
# source://ruboclean//lib/ruboclean/runner.rb#5
class Ruboclean::Runner
  # @return [Runner] a new instance of Runner
  #
  # source://ruboclean//lib/ruboclean/runner.rb#6
  def initialize(arguments); end

  # source://ruboclean//lib/ruboclean/runner.rb#10
  def run!; end

  private

  # Returns the value of attribute arguments.
  #
  # source://ruboclean//lib/ruboclean/runner.rb#21
  def arguments; end
end

# source://ruboclean//lib/ruboclean/version.rb#4
Ruboclean::VERSION = T.let(T.unsafe(nil), String)
